-- VER EJECUCIONES DE CAPTURA DE DYNAMICSPERF
	-- DynamicsPerf
	SELECT *
	FROM DynamicsPerf.dbo.STATS_COLLECTION_SUMMARY
	ORDER BY STATS_TIME DESC

-- VER LOG DE ERRORES DE SQL
	-- DynamicsPerf
	SELECT *
	FROM SQLERRORLOG
	ORDER BY LOGDATE DESC

-- VER CONFIGURACIÓN DE BBDD'S
	-- DynamicsPerf
	SELECT *
	FROM DynamicsPerf.dbo.SQL_DATABASES_CURR_VW

-- VER ARCHIVOS DE BBDD'S
	-- DynamicsPerf
	SELECT *
	FROM DynamicsPerf.dbo.SQL_DATABASEFILES_CURR_VW

-- VER TAMAÑO DE VIRTUAL LOG FILES
	-- DynamicsPerf
	WITH VLFUSE AS 
	( 
	SELECT DATABASE_NAME, FILEID, 
	COUNT(*) AS VLF_COUNT,
	SUM(CASE WHEN STATUS = 0 THEN 1 ELSE 0 END) AS FREE, 
	SUM(CASE WHEN STATUS != 0 THEN 1 ELSE 0 END) AS INUSE 
	FROM LOGINFO
	GROUP BY DATABASE_NAME, FILEID 
	) 
	SELECT DISTINCT FILE_NAME, VLF_COUNT, FREE,INUSE,[DB_SIZE(MB)]  AS [FILE_SIZE(MB)],[GROW_MAX_SIZE(MB)],GROWTH_UNITS  FROM VLFUSE V 
	INNER JOIN SQL_DATABASEFILES F ON V.DATABASE_NAME= F.DATABASE_NAME and V.FILEID = F.FILE_ID
	WHERE F.DATABASE_NAME = 'FMNAX09LIVE'

-- VER TAMAÑO DE TABLAS DE LOG
	-- DynamicsPerf
	SELECT TABLE_NAME, ROW_COUNT
	FROM DynamicsPerf.dbo.INDEX_STATS_CURR_VW
	WHERE
	(INDEX_DESCRIPTION LIKE 'CLUSTERED%' OR
	INDEX_DESCRIPTION LIKE 'HEAP%' ) AND
	TABLE_NAME IN
	( 'EVENTCUD' --alerts
	, 'SYSTRACETABLESQL' --tracing
	, 'INVENTSUMLOGTTS'
	, 'INVENTSETTLEMENT' --invent
	, 'BATCH' --batch
	, 'BATCHHISTORY' --batch
	, 'SYSDATABASELOG' --logging
	, 'SYSEXCEPTIONTABLE' --exception
	)
	ORDER BY TABLE_NAME

-- VER CONFIGURACIÓN DE AOS
	-- DynamicsPerf
	-- Requiere ejecución de AOSAnalysis.cmd en AOS
	SELECT * FROM DynamicsPerf.dbo.AOS_EVENTLOG
	SELECT * FROM DynamicsPerf.dbo.AOS_REGISTRY

-- VER PROCESOS POR LOTES DE AOS
	-- DynamicsAX
	SELECT * FROM MicrosoftDynamicsAX.dbo.BATCH

	SELECT *
	FROM MicrosoftDynamicsAX.dbo.BATCH B
	LEFT JOIN MicrosoftDynamicsAX.dbo.BATCHHISTORY H ON
		B.RECID = H.BATCHID

-- VER CONSULTAS LARGAS DE UN DIA CONCRETO
	-- DynamicsAX
	DECLARE @DATE AS DATETIME; SET @DATE = '01/29/2015'

	SELECT TOP 1000 [TRACECONTAINER],[TRACETIME],[CATEGORY],[STATEMENT],[CALLSTACK],[CODE],[TEXT],[TEXTDETAILS],[CONNECTIONTYPE],[CONNECTIONSPID],[CONNECTIONID],[ISLOBSINCLUDED],[ISMOREDATAPENDING],[ROWSAFFECTED],[ROWSIZE],[ROWSPERFETCH],[ISSELECTEDFORUPDATE],[ISSTARTEDWITHINTRANSACTION],[STATEMENTTYPE],[STATEMENTID],[STATEMENTREUSECOUNT],[DETAILTYPE],[CREATEDDATETIME],[DATAAREAID],[RECVERSION],[RECID]
	FROM [MicrosoftDynamicsAX].[dbo].[SYSTRACETABLESQL]
	WHERE CREATEDDATETIME >= @DATE

-- ULTIMA CAPTURA DE DYNAMICSPERF
	-- DynamicsPerf
	SELECT MAX([STATS_TIME])
	FROM [DynamicsPerf].[dbo].[CAPTURE_LOG]

-- VER SECUENCIAS NUMÉRICAS ACTUALES
	-- DynamicsPerf
	SELECT 
		N.COMPANYID as [CompanyID] ,
		isnull(N.[Number_sequence_total], 0) AS [Number_sequence_total] ,
		isnull(N.[Number_sequence_continuous], 0) AS [Number_sequence_continuous] ,
		isnull(N.[Number_sequence_non_continuous], 0) AS [Number_sequence_non_continuous] ,
		isnull(N.[Number_sequence_non_continuous_with_preallocation], 0) AS [Number_sequence_non_continuous_with_preallocation]
	FROM
	(
		SELECT DISTINCT
		COMPANYID,
		(SELECT COUNT(*) FROM AX_NUM_SEQUENCES_CURR_VW NT1 WHERE NT.COMPANYID = NT1.COMPANYID AND NT1.NEXTREC > 0 GROUP BY NT1.COMPANYID) AS [Number_sequence_total] ,
		(SELECT COUNT(*) FROM AX_NUM_SEQUENCES_CURR_VW NT2 WHERE NT.COMPANYID = NT2.COMPANYID AND NT2.CONTINUOUS = 'Yes' AND NT2.NEXTREC > 0 GROUP BY NT2.COMPANYID) AS [Number_sequence_continuous] ,
		(SELECT COUNT(*) FROM AX_NUM_SEQUENCES_CURR_VW NT3 WHERE NT.COMPANYID = NT3.COMPANYID AND NT3.CONTINUOUS = 'No' AND NT3.NEXTREC > 0 GROUP BY NT3.COMPANYID) AS [Number_sequence_non_continuous] ,
		(SELECT COUNT(*) FROM AX_NUM_SEQUENCES_CURR_VW NT4 WHERE NT.COMPANYID = NT4.COMPANYID AND NT4.CONTINUOUS = 'No' AND NT4.NEXTREC > 0 AND NT4.FETCHAHEAD <> 0 GROUP BY NT4.COMPANYID) AS [Number_sequence_non_continuous_with_preallocation]
		FROM AX_NUM_SEQUENCES_CURR_VW NT
	) AS N

-- VER SECUENCIAS NUMÉRICAS CONSUMIDAS EN LAS ÚLTIMAS 24 HORAS
	-- DynamicsPerf
 	WITH OrderedStatsCollections AS
	(
	SELECT run_name,
	ROW_NUMBER() OVER (ORDER BY stats_time) AS 'RowNumber'
	FROM stats_collection_summary
	)
	-- Select max created rows, in all stats collections, for each continuous numbersequence/dataareaid.
	SELECT [COMPANYID] , [NUMBERSEQUENCE] , [TXT] , MAX ([TOTAL NUMBERS CONSUMED] ) AS [TOTAL NUMBERS CONSUMED] , duration, FORMAT
	from
	(SELECT RUN1. COMPANYID, RUN1. NUMBERSEQUENCE as NUMBERSEQUENCE , RUN1. TEXT AS TXT,
	RUN2. NEXTREC - RUN1. NEXTREC AS [TOTAL NUMBERS CONSUMED] ,
	duration = 'In ' + STR((DATEDIFF(hh, RUN1. STATS_TIME,
	RUN2. STATS_TIME)), 2) + 'hour periods' ,
	RUN1. [FORMAT]
	FROM  [AX_NUM_SEQUENCES_VW] RUN1
	INNER JOIN [AX_NUM_SEQUENCES_VW] RUN2
	ON RUN1. NUMBERSEQUENCE = RUN2. NUMBERSEQUENCE
	AND RUN1. COMPANYID = RUN2. COMPANYID
	INNER JOIN OrderedStatsCollections S1
	ON S1. Run_Name = RUN1. Run_Name
	INNER JOIN OrderedStatsCollections S2
	ON S2. Run_Name = RUN2. Run_Name
	WHERE
	RUN1. [CONTINUOUS] = 'Yes'
	AND S2. RowNumber = S1. RowNumber + 1
	AND RUN2. NEXTREC > RUN1. NEXTREC
	AND DATEDIFF(hh, RUN1. STATS_TIME, RUN2. STATS_TIME) = 3
	) RES
	GROUP BY [COMPANYID] , [NUMBERSEQUENCE] , [TXT] , duration, FORMAT
	ORDER BY [TOTAL NUMBERS CONSUMED] DESC;

-- VER SECUENCIAS NO CONTINUAS SIN PRE-ALLOCATION
	-- DynamicsPerf
	WITH OrderedStatsCollections AS
	(
	SELECT run_name,
	ROW_NUMBER() OVER (ORDER BY stats_time) AS [RowNumber]
	FROM stats_collection_summary
	)
	-- Select max created rows, in all stats collections, for each non-continuous + no prefetch numbersequence/dataareaid. 
	SELECT [NUMBERSEQUENCE] , [TXT] ,
	MAX ([TOTAL NUMBERS CONSUMED] ) AS [TOTAL NUMBERS CONSUMED] ,
	MAX ([AVG HOURLY CONSUMPTION RATE] ) AS [AVG CONSUMPTION in 1 hour periods] ,
	FORMAT
	from
	(
	SELECT RUN1. NUMBERSEQUENCE as NUMBERSEQUENCE , RUN1. TEXT AS TXT,
	RUN2. NEXTREC - RUN1. NEXTREC AS [TOTAL NUMBERS CONSUMED] ,
	(RUN2. NEXTREC - RUN1. NEXTREC)/(DATEDIFF(hh, RUN1. STATS_TIME,
	RUN2. STATS_TIME)) AS [AVG HOURLY CONSUMPTION RATE] ,
	RUN1. [FORMAT]
	FROM  [AX_NUM_SEQUENCES_VW] RUN1
	INNER JOIN [AX_NUM_SEQUENCES_VW] RUN2
	ON RUN1. NUMBERSEQUENCE = RUN2. NUMBERSEQUENCE
	INNER JOIN OrderedStatsCollections S1
	ON S1. Run_Name = RUN1. Run_Name
	INNER JOIN OrderedStatsCollections S2
	ON S2. Run_Name = RUN2. Run_Name
	WHERE
	((RUN1. [CONTINUOUS] = 'No') AND (RUN1. FETCHAHEADQTY = 0))
	AND S2. RowNumber = S1. RowNumber + 1
	AND RUN2. NEXTREC - RUN1. NEXTREC > 100
	) RES
	GROUP BY [NUMBERSEQUENCE] , [TXT] , FORMAT
	ORDER BY [TOTAL NUMBERS CONSUMED] DESC;

-- VER INDICES NO UTILIZADOS
	-- DynamicsPerf
	SELECT TABLE_NAME,
	INDEX_NAME,
	INDEX_KEYS,
	SUM(USER_UPDATES) AS USER_UPDATES
	FROM INDEX_STATS_VW
	WHERE INDEX_DESCRIPTION NOT LIKE '%UNIQUE%'
	AND INDEX_DESCRIPTION != 'HEAP'
	GROUP BY TABLE_NAME, INDEX_NAME, INDEX_DESCRIPTION, INDEX_KEYS, INCLUDED_COLUMNS
	HAVING SUM(USER_SEEKS) = 0
	AND SUM(USER_SCANS) = 0
	AND SUM(USER_LOOKUPS) = 0
	ORDER BY USER_UPDATES DESC

-- VER INDICES FALTANTES
	-- DynamicsPerf
	SELECT TOP 100 INDEX_IMPACT AS [Index Impact] ,
	SQL_TEXT AS [Query Text] ,
	QUERY_PLAN AS [Query Plan] ,
	TABLE_NAME AS [Table Name] ,
	EQUALITY_COLUMNS AS [Equality Columns] ,
	INEQUALITY_COLUMNS AS [Inequality Columns] ,
	EXECUTION_COUNT AS [Execution Count] ,
	STR(ROUND(TOTAL_ELAPSED_TIME, 0), datalength(cast(TOTAL_ELAPSED_TIME AS VARCHAR(32))) - 3, 0) AS [Total Time] ,
	ROUND(AVG_ELAPSED_TIME, 2) AS [Average Time]
	FROM MISSING_INDEXES_CURR_VW
	--WHERE INCLUDED_COLUMNS = ''
	ORDER BY TOTAL_LOGICAL_READS DESC

-- VER INDICES ACTUALES
	-- DynamicsPerf
	SELECT TOP * FROM [DynamicsPerf].[dbo].[AX_INDEX_DETAIL_CURR_VW]

